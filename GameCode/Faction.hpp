//=================================================================================
// Faction.hpp
// Author: Tyler George
// Date  : September 18, 2015
//=================================================================================

#pragma once

#ifndef __included_Faction__
#define __included_Faction__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include <map>
#include "Engine/Utilities/XMLParser.h"

class Faction;
class Entity;

///---------------------------------------------------------------------------------
/// Enum
///---------------------------------------------------------------------------------
enum FactionRelationDefinition
{
    FR_HATED = -30,
    FR_DISLIKED = -15,
    FR_NEUTRAL = 0,
    FR_LIKED = 15,
    FR_LOVED = 30
};

enum FactionAction
{
    FA_NONE = 0,
    FA_HURT_ME = -4,
    FA_HEALED_ME = 6,
    FA_HURT_ALLY = -3,
    FA_HEALED_ALLY = 3,
    FA_KILLED_ALLY = -5

};

///---------------------------------------------------------------------------------
/// Structs
///---------------------------------------------------------------------------------
struct FactionRelationship
{
    unsigned int factionID;
    int status;
};

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------
typedef std::map< unsigned int, Faction* > FactionMap;
typedef std::map< unsigned int, FactionRelationship > FactionRelationshipMap;

////===========================================================================================
///===========================================================================================
// Faction Class
///===========================================================================================
////===========================================================================================
class Faction
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    Faction( const XMLNode& factionRoot );
    Faction( const Faction& copy, const XMLNode& factionNode );
    ~Faction();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------
    static bool LoadAllFactions();

	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    static Faction* GetMasterFactionFromName( const std::string& factionName );
    int GetRelationshipStatus( unsigned int factionID, unsigned int entityID );

    unsigned int GetFactionID() const { return m_factionID; }
    void Save( XMLNode& parent );

    void CleanUpPointers( std::map< int, Entity* > hookupMap );

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    void AdjustRelationshipStatus( unsigned int factionID, unsigned int entityID, int changeAmount );

	///---------------------------------------------------------------------------------
	/// Public Member Variables
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Static Variables
	///---------------------------------------------------------------------------------


private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    std::string m_factionName;
    unsigned int m_factionID;

    FactionRelationshipMap m_entityRelationships;
    FactionRelationshipMap m_factionRelationships;

    ///---------------------------------------------------------------------------------
    /// Private Static Variables
    ///---------------------------------------------------------------------------------
    static FactionMap s_factionMap;


};

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif