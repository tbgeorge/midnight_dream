//=================================================================================
// FeatureFactory.hpp
// Author: Tyler George
// Date  : October 4, 2015
//=================================================================================

#pragma once

#ifndef __included_FeatureFactory__
#define __included_FeatureFactory__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include <map>

#include "Engine\Utilities\XMLParser.h"
#include "Engine\Math\IntRange.hpp"

#include "GameCode\Entities\Feature.hpp"

class FeatureFactory;

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------
typedef std::map< std::string, FeatureFactory* > FeatureFactories;

////===========================================================================================
///===========================================================================================
// FeatureFactory Class
///===========================================================================================
////===========================================================================================
class FeatureFactory
{
public:
    ///---------------------------------------------------------------------------------
    /// Constructors/Destructors
    ///---------------------------------------------------------------------------------
    FeatureFactory( XMLNode& FeatureNode );
    ~FeatureFactory();

    ///---------------------------------------------------------------------------------
    /// Initialization
    ///---------------------------------------------------------------------------------
    static bool LoadAllFeatureFactories();

    ///---------------------------------------------------------------------------------
    /// Accessors/Queries
    ///---------------------------------------------------------------------------------
    static FeatureFactory* FindFactoryByName( const std::string& name );
    static std::vector< FeatureFactory* > FindAllFactoriesOfType( FeatureType type );
    static FeatureFactories& GetFactories() { return s_featureFactories; }

    Feature* SpawnFeature( const XMLNode& possibleSaveData );
    FeatureType GetType() { return m_templateFeature->GetType(); }

    ///---------------------------------------------------------------------------------
    /// Mutators
    ///---------------------------------------------------------------------------------

    ///---------------------------------------------------------------------------------
    /// Update
    ///---------------------------------------------------------------------------------

    ///---------------------------------------------------------------------------------
    /// Render
    ///---------------------------------------------------------------------------------

    ///---------------------------------------------------------------------------------
    /// Public Member Variables
    ///---------------------------------------------------------------------------------

    ///---------------------------------------------------------------------------------
    /// Static Variables
    ///---------------------------------------------------------------------------------

private:
    ///---------------------------------------------------------------------------------
    /// Private Member Variables
    ///---------------------------------------------------------------------------------


protected:

    ///---------------------------------------------------------------------------------
    /// Protected Static Variables
    ///---------------------------------------------------------------------------------
    static FeatureFactories s_featureFactories;

    ///---------------------------------------------------------------------------------
    /// Protected Member Variables
    ///---------------------------------------------------------------------------------
    Feature* m_templateFeature;
};

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif