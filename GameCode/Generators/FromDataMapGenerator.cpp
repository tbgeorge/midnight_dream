//=================================================================================
// FromDataMapGenerator.cpp
// Author: Tyler George
// Date  : August 27, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "GameCode/Generators/FromDataMapGenerator.hpp"
#include "Engine/Utilities/XMLParser.h"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================

MapGeneratorRegistration FromDataMapGenerator::s_fromDataMapGeneratorRegistration( "Map From Data", &FromDataMapGenerator::CreateMapGenerator );


////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
FromDataMapGenerator::FromDataMapGenerator( const std::string& name )
    : BaseMapGenerator( name )
{

}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
FromDataMapGenerator::~FromDataMapGenerator()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
BaseMapGenerator* FromDataMapGenerator::CreateMapGenerator( const std::string& name )
{
    return new FromDataMapGenerator( name );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Map* FromDataMapGenerator::CreateMap( const IntVector2& mapSize )
{
    std::string filePath = "Data/Maps/FieldOfView.Map.xml";

    XMLNode root = XMLNode::parseFile( filePath.c_str() );

    XMLNode mapNode = root.getChildNode();

    while (!mapNode.hasText())
        mapNode = mapNode.getChildNode();


    std::string mapText( mapNode.getText() );

    root.deleteNodeContent();

    Strings mapRows;
    Tokenize( mapText, mapRows, "\r\n" );

    IntVector2 dataMapSize;
    dataMapSize.y = mapRows.size();
    dataMapSize.x = mapRows[0].size();

    Map* map = new Map( dataMapSize );
    Cells* cells = map->GetCells();

    int seed = TripleRandomInt();
    map->SetSeed( seed );
    srand( seed );

    int cellIndex = 0;
    for (Strings::reverse_iterator mapRowIter = mapRows.rbegin(); mapRowIter != mapRows.rend(); ++mapRowIter)
    {
        std::string mapRow = *mapRowIter;
        for (std::string::const_iterator cellTypeIter = mapRow.begin(); cellTypeIter != mapRow.end(); ++cellTypeIter)
        {
            char cellTypeSymbol = *cellTypeIter;
            if (cellTypeSymbol == '#')
                cells->at( cellIndex ).SetType( CT_WALL );
            else
                cells->at( cellIndex ).SetType( CT_AIR );

            ++cellIndex;
        }
    }

    return map;
}


///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
bool FromDataMapGenerator::ProcessOneStep( Map* map )
{
    UNUSED( map );
    return true;
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

