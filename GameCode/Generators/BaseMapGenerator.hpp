//=================================================================================
// BaseMapGenerator.h
// Author: Tyler George
// Date  : August 20, 2015
//=================================================================================

#pragma once

#ifndef __included_BaseMapGenerator__
#define __included_BaseMapGenerator__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include <string>
#include <map>

#include "Engine/Input/InputSystem.hpp"
#include "Engine/Renderer/OpenGLRenderer.hpp"
#include "Engine/Renderer/FontRenderer.hpp"
#include "Engine/Utilities/Utilities.hpp"

#include "GameCode/Map.hpp"

class MapGeneratorRegistration;
class BaseMapGenerator;

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------
typedef std::map< std::string, MapGeneratorRegistration* > MapGeneratorRegistryMap;
typedef BaseMapGenerator* (MapGeneratorCreationFunc)( const std::string& name ); 

////===========================================================================================
///===========================================================================================
// MapGeneratorRegistration Class
///===========================================================================================
////===========================================================================================
class MapGeneratorRegistration
{
public:
    ///---------------------------------------------------------------------------------
    /// Constructors/Destructors
    ///---------------------------------------------------------------------------------
    MapGeneratorRegistration( const std::string& name, MapGeneratorCreationFunc* creationFunction )
        : m_name( name )
        , m_creationFunc( creationFunction )
    {
        if (!s_registry)
            s_registry = new MapGeneratorRegistryMap();

        std::string lowercaseName = ConvertToLowerCase( name );
        s_registry->insert( std::pair< std::string, MapGeneratorRegistration* >( lowercaseName, this ) );
    }

    ///---------------------------------------------------------------------------------
    /// Accessors/Queries
    ///---------------------------------------------------------------------------------
    const std::string& GetName() const { return m_name; }
    static MapGeneratorRegistryMap* GetMapGeneratorRegistry() { return s_registry; }
    BaseMapGenerator* CreateMapGenerator() { return (*m_creationFunc)(m_name); }

private:
    ///---------------------------------------------------------------------------------
    /// Private Member Variables
    ///---------------------------------------------------------------------------------
    MapGeneratorCreationFunc*   m_creationFunc;
    std::string                 m_name;
    
    ///---------------------------------------------------------------------------------
    /// Static Private Member Variables
    ///---------------------------------------------------------------------------------
    static MapGeneratorRegistryMap* s_registry;
};

////===========================================================================================
///===========================================================================================
// BaseMapGenerator Class
///===========================================================================================
////===========================================================================================
class BaseMapGenerator
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    BaseMapGenerator( const std::string& name );
    ~BaseMapGenerator();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    std::string GetName() { return m_name; }
    virtual Map* CreateMap( const IntVector2& mapSize = IntVector2::ZERO ) = 0;
    virtual bool ProcessOneStep( Map* map ) = 0;
    void FinalizeMap( Map* map );
      

	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Update
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Render
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Public Member Variables
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Static Variables
	///---------------------------------------------------------------------------------


private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    std::string m_name;
};

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif