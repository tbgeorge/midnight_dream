// //=================================================================================
// // InspectItemBehavior.cpp
// // Author: Tyler George
// // Date  : October 3, 2015
// //=================================================================================
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Includes
// ///===========================================================================================
// ////===========================================================================================
// 
// #include "GameCode/AIBehaviors/InspectItemBehavior.hpp"
// #include "GameCode/Entities/Actor.hpp"
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Static Variable Initialization
// ///===========================================================================================
// ////===========================================================================================
// 
// AIBehaviorRegistration InspectItemBehavior::s_InspectItemBehaviorRegistration( "InspectItem", &InspectItemBehavior::CreateAIBehavior );
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Constructors/Destructors
// ///===========================================================================================
// ////===========================================================================================
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// InspectItemBehavior::InspectItemBehavior( const std::string& name, const XMLNode& behaviorRoot )
//     : BaseAIBehavior( name, behaviorRoot )
//     , m_range( 0 )
//     , m_chanceToInspectItem( 1.0f )
//     , m_targetPos( MapPosition( -1, -1 ) )
// {
//     m_range = GetIntProperty( behaviorRoot, "range", 5 );
//     m_chanceToInspectItem = GetFloatProperty( behaviorRoot, "chanceToInspectItem", 1.0f );
// }
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// InspectItemBehavior::InspectItemBehavior( const InspectItemBehavior& copy )
//     : BaseAIBehavior( copy.m_name )
// {
//     m_chanceToCalcUtility = copy.m_chanceToCalcUtility;
//     m_range = copy.m_range;
//     m_chanceToInspectItem = copy.m_chanceToInspectItem;
//     m_targetPos = copy.m_targetPos;
// }
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// InspectItemBehavior::~InspectItemBehavior()
// {
// 
// }
// 
// ////===========================================================================================
// ///===========================================================================================
// // Initialization
// ///===========================================================================================
// ////===========================================================================================
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Accessors/Queries
// ///===========================================================================================
// ////===========================================================================================
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// BaseAIBehavior* InspectItemBehavior::CreateAIBehavior( const std::string& name, const XMLNode& behaviorRoot )
// {
//     return new InspectItemBehavior( name, behaviorRoot );
// }
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// float InspectItemBehavior::CalcUtility()
// {
//     bool calcUtility = GetRandomFloatZeroToOne() <= m_chanceToCalcUtility ? true : false;
// 
//     if (!calcUtility)
//         return 0.0f;
// 
//     //Entity* hostileTarget = m_actor->GetHostileTarget();
//     std::vector< Cell* > visibleCells = m_actor->GetVisibleCells();
// 
//     MapPosition closestItemPos = MapPosition( -1, -1 );
// 
//     for (std::vector< Cell* >::iterator cellIter = visibleCells.begin(); cellIter != visibleCells.end(); ++cellIter)
//     {
//         Cell* cell = *cellIter;
// 
//         if (cell->GetInventory() && !cell->GetInventory()->IsEmpty())
//             closestItemPos = cell->GetMapPosition();
//     }
// 
//     if (closestItemPos == MapPosition( -1, -1 ))
//         return 0.0f;
// 
//     m_targetPos = closestItemPos;
//     int distance = Map::CalculateManhattanDistance( m_actor->GetMapPosition(), m_targetPos );
//     return (2.0f + (float)(m_range - distance));
// 
// }
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// float InspectItemBehavior::Think()
// {
// 
// 
//     bool InspectItem = GetRandomFloatZeroToOne() <= m_chanceToInspectItem ? true : false;
// 
//     if (!InspectItem)
//         return 0.2f;
// 
//     Path* path = Pathfinder::CalculatePath( m_actor->GetMap(), m_actor, m_actor->GetMapPosition(), m_targetPos, true, true );
//     MapPosition nextPosition = path->GetNextStep()->m_position;
// 
//     MapDirection dirToMove = Map::GetDirection( m_actor->GetMapPosition(), nextPosition );
// 
//     if (dirToMove != MD_INVALID)
//     {
//         if (m_actor->TestOneMove( dirToMove ))
//             m_actor->MakeOneMove( dirToMove );
//     }
// 
//     return 1.0f;
// }
// 
// ///---------------------------------------------------------------------------------
// ///
// ///---------------------------------------------------------------------------------
// BaseAIBehavior* InspectItemBehavior::Clone()
// {
//     BaseAIBehavior* clone = new InspectItemBehavior( *this );
// 
//     return clone;
// }
// 
// ////===========================================================================================
// ///===========================================================================================
// // Mutators
// ///===========================================================================================
// ////===========================================================================================
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Update
// ///===========================================================================================
// ////===========================================================================================
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Render
// ///===========================================================================================
// ////===========================================================================================
// 
// 
// ////===========================================================================================
// ///===========================================================================================
// // Private Functions
// ///===========================================================================================
// ////===========================================================================================
// 
