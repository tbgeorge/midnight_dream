//=================================================================================
// WanderBehavior.cpp
// Author: Tyler George
// Date  : September 15, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "GameCode/AIBehaviors/WanderBehavior.hpp"
#include "GameCode/Entities/Actor.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================

AIBehaviorRegistration WanderBehavior::s_WanderBehaviorRegistration( "Wander", &WanderBehavior::CreateAIBehavior );


////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
WanderBehavior::WanderBehavior( const std::string& name, const XMLNode& behaviorRoot )
    : BaseAIBehavior( name, behaviorRoot )
    , m_currentDirection( MD_INVALID )
{
    m_chanceToRest = GetFloatProperty( behaviorRoot, "chanceToRest", 0.5f );
    m_chanceToContinueStraight = GetFloatProperty( behaviorRoot, "chanceToContinueStraight", 0.5f );
    m_healFromResting = GetIntProperty( behaviorRoot, "healFromResting", 0 );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
WanderBehavior::WanderBehavior( const WanderBehavior& copy )
    : BaseAIBehavior( copy.m_name )
{
    m_chanceToCalcUtility = copy.m_chanceToCalcUtility;
    m_chanceToRest = copy.m_chanceToRest;
    m_chanceToContinueStraight = copy.m_chanceToContinueStraight;
    m_healFromResting = copy.m_healFromResting;
    m_currentDirection = MD_INVALID;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
WanderBehavior::~WanderBehavior()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
BaseAIBehavior* WanderBehavior::CreateAIBehavior( const std::string& name, const XMLNode& behaviorRoot )
{
    return new WanderBehavior( name, behaviorRoot );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
float WanderBehavior::CalcUtility()
{
    bool calcUtility = GetRandomFloatZeroToOne() <= m_chanceToCalcUtility ? true : false;

    if (!calcUtility)
        return 0.0f;
    return 1.0f;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
InteractionEvent* WanderBehavior::Think( float& out_actionTime )
{
    if (m_currentDirection >= MD_INVALID)
        m_currentDirection = (MapDirection) GetRandomIntInRange( 0, MD_INVALID - 1 );

    bool wait = GetRandomFloatZeroToOne() <= m_chanceToRest ? true : false;
    bool continueStraight = GetRandomFloatZeroToOne() <= m_chanceToContinueStraight ? true : false;

    bool actorIsWounded = m_actor->GetMaxHealth() != m_actor->GetHealth();

    if ( actorIsWounded && wait)
    {
        m_actor->ApplyHealing( m_healFromResting );
        out_actionTime = 1.0f;
        return nullptr;
    }

    else if (continueStraight)
    {
        if (m_actor->TestOneMove( m_currentDirection ))
            m_actor->MakeOneMove( m_currentDirection );
        out_actionTime = 1.0f;
        return nullptr;
    }

    else
    {
        int numTries = 0;
        do 
        {
            // Wait if can't find a valid move
            if (numTries >= 20)
            {
                out_actionTime = 1.0f;
                return nullptr;
            }

            m_currentDirection = (MapDirection)GetRandomIntInRange( 0, MD_INVALID - 1 );
            numTries++;            
        } while (!m_actor->TestOneMove( m_currentDirection ));

        m_actor->MakeOneMove( m_currentDirection );

        out_actionTime = 1.0f;
        return nullptr;
    }
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
BaseAIBehavior* WanderBehavior::Clone()
{
    BaseAIBehavior* clone = new WanderBehavior( *this );

    return clone;
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

