//=================================================================================
// TeleportBehavior.cpp
// Author: Tyler George
// Date  : September 18, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "GameCode/AIBehaviors/TeleportBehavior.hpp"
#include "GameCode/Entities/Actor.hpp"
#include "../Entities/Entity.hpp"
#include "Engine/Utilities/StringTable.hpp"
#include "../MessageBar.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================

AIBehaviorRegistration TeleportBehavior::s_teleportBehaviorRegistration( "Teleport", &TeleportBehavior::CreateAIBehavior );


////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
TeleportBehavior::TeleportBehavior( const std::string& name, const XMLNode& behaviorRoot )
    : BaseAIBehavior( name, behaviorRoot )
    , m_healthThreshold( 0.5f )
    , m_chanceToTeleport( 1.0f )
    , m_phrase( "teleported" )
    , m_numUses( -1 )
{
    m_healthThreshold = GetFloatProperty( behaviorRoot, "healthThreshold", m_healthThreshold );
    m_chanceToTeleport = GetFloatProperty( behaviorRoot, "chanceToTeleport", m_chanceToTeleport );
    m_numUses = GetIntProperty( behaviorRoot, "maxTimes", m_numUses );
    m_phrase = GetStringProperty( behaviorRoot, "phrase", m_phrase );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
TeleportBehavior::TeleportBehavior( const TeleportBehavior& copy )
    : BaseAIBehavior( copy.m_name )
{
    m_chanceToCalcUtility = copy.m_chanceToCalcUtility;
    m_healthThreshold = copy.m_healthThreshold;
    m_numUses = copy.m_numUses;
    m_chanceToTeleport = copy.m_chanceToTeleport;
    m_phrase = copy.m_phrase;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
TeleportBehavior::~TeleportBehavior()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
BaseAIBehavior* TeleportBehavior::CreateAIBehavior( const std::string& name, const XMLNode& behaviorRoot )
{
    return new TeleportBehavior( name, behaviorRoot );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
float TeleportBehavior::CalcUtility()
{
    bool calcUtility = GetRandomFloatZeroToOne() <= m_chanceToCalcUtility ? true : false;

    if (!calcUtility)
        return 0.0f;


    if (m_numUses == 0)
        return 0.0f;

    float healthPercentage = ((float)m_actor->GetHealth()) / ((float)m_actor->GetMaxHealth());
    if (healthPercentage > m_healthThreshold)
        return 0.0f;

    bool teleport = GetRandomFloatZeroToOne() <= m_chanceToTeleport ? true : false;

    if (!teleport)
        return 0.0f;

    return 10.0f * (m_actor->GetMaxHealth() - m_actor->GetHealth());

}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
InteractionEvent* TeleportBehavior::Think( float& out_actionTime )
{

    Message msg;
    msg.m_instigator = m_actor->GetName();
    msg.m_position = m_actor->GetMapPosition();
    msg.m_text = "The " + m_actor->GetName() + " " + m_phrase + " and disappears!";
    MessageBar::AddMessage( msg );

    MapPosition teleportLocation = m_actor->GetMap()->GetRandomOpenPosition();

    while ( Map::CalculateManhattanDistance( teleportLocation, m_actor->GetMapPosition() ) <= 5 )
        teleportLocation = m_actor->GetMap()->GetRandomOpenPosition();

    m_actor->GetMap()->SetEntityAtPosition( m_actor, teleportLocation );

    if (m_numUses > 0)
        m_numUses--;

    out_actionTime = 1.0f;
    return nullptr;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
BaseAIBehavior* TeleportBehavior::Clone()
{
    BaseAIBehavior* clone = new TeleportBehavior( *this );

    return clone;
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

