//=================================================================================
// NPC.cpp
// Author: Tyler George
// Date  : September 10, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================

#include "GameCode/Entities/NPC.hpp"
#include "../FieldOfViewCalculator.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================



////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
NPC::NPC( const XMLNode& npcNode )
    : Actor( npcNode )
{
    // do parsing here
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
NPC::NPC( const std::string& name )
    : Actor( name )
{

}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
NPC::NPC( const NPC& copy, const XMLNode& npcNode )
    : Actor( copy, npcNode )
{
    for each (BaseAIBehavior* b in copy.m_aiBehaviors)
    {
        BaseAIBehavior* newAIBehavior = b->Clone();
        newAIBehavior->SetActor( this );
        m_aiBehaviors.push_back( newAIBehavior );
    }

    // copy stuff from save data
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
NPC::~NPC()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::Startup()
{

}

////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::Save( XMLNode& parent, bool createChild )
{
    XMLNode nodeToModify = parent;
    if (createChild)
        nodeToModify = CreateNode( "NPC" );
    
    Actor::Save( nodeToModify, false );

    if (createChild)
        AddChild( parent, nodeToModify );
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::AddBehavior( BaseAIBehavior* behavior )
{
    m_aiBehaviors.push_back( behavior );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
InteractionEvent* NPC::Think( float& out_actionTime )
{
    FieldOfViewCalculator::CalculateFOV_BFR( this, m_visibilityRange, m_owningMap );

    float highestUtility = -1.0f;
    BaseAIBehavior* highestUtilityBehavior = nullptr;
    for each (BaseAIBehavior* behavior in m_aiBehaviors)
    {
        float behaviorUtility = behavior->CalcUtility();
        if (highestUtility == -1.0f || behaviorUtility > highestUtility)
        {
            highestUtility = behaviorUtility;
            highestUtilityBehavior = behavior;
        }
    }

    if (highestUtility != -1)
    {
        
        InteractionEvent* event = highestUtilityBehavior->Think( out_actionTime );
        return event;
    }
    out_actionTime = 0.0f;
    return nullptr;
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::HandleEvent( InteractionEvent* event )
{
    bool handleEvent = false;
    for (std::vector< Cell* >::iterator visibleCellIter = m_visibleCells.begin(); visibleCellIter != m_visibleCells.end(); ++visibleCellIter)
    {
        Cell* cell = *visibleCellIter;

        if (event->m_location == cell->GetMapPosition())
            handleEvent = true;
    }

    if (!handleEvent)
        return;

    Faction* affectedEntityFaction = event->m_other->GetFaction();
    int relationshipValue = m_faction->GetRelationshipStatus( affectedEntityFaction->GetFactionID(), event->m_other->GetEntityID() );

    if (relationshipValue > (int)FR_NEUTRAL)
    {
        FactionAction action = FA_NONE;

        // I care about this event
        if (event->m_type == INT_TYPE_DAMAGE)
        {
            if (event->m_other->GetEntityID() == m_entityID && !m_hasDied)
                action = FA_HURT_ME;

            else if (event->m_other->HasDied())
                action = FA_KILLED_ALLY;

            else
                action = FA_HURT_ALLY;
        }

        else if (event->m_type == INT_TYPE_HEAL)
        {
            if (event->m_other->GetEntityID() == m_entityID )
                action = FA_HEALED_ME;

            else 
                action = FA_HEALED_ALLY;
        }

        m_faction->AdjustRelationshipStatus( event->m_instigator->GetFaction()->GetFactionID(), event->m_instigator->GetEntityID(), (int)action );
    }
}

////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::ProcessInput( InputSystem* inputSystem, double deltaSeconds )
{
    UNUSED( inputSystem );
    UNUSED( deltaSeconds );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::Update( double deltaSeconds, bool debugModeEnabled )
{
    UNUSED( deltaSeconds );
    UNUSED( debugModeEnabled );
}


////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
void NPC::Render( OpenGLRenderer* renderer, FontRenderer* fontRenderer, const Font& font, const unsigned int& shaderID, bool debugModeEnabled )
{
    Actor::Render( renderer, fontRenderer, font, shaderID, debugModeEnabled );
}

////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

