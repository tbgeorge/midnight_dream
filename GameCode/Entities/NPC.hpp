//=================================================================================
// NPC.hpp
// Author: Tyler George
// Date  : September 10, 2015
//=================================================================================

#pragma once

#ifndef __included_NPC__
#define __included_NPC__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include "Engine/Input/InputSystem.hpp"
#include "Engine/Renderer/OpenGLRenderer.hpp"
#include "Engine/Renderer/FontRenderer.hpp"
#include "Engine/Utilities/XMLParser.h"

#include "GameCode/Entities/Actor.hpp"
#include "../AIBehaviors/BaseAIBehavior.hpp"


///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------


////===========================================================================================
///===========================================================================================
// NPC Class
///===========================================================================================
////===========================================================================================
class NPC : public Actor
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    NPC( const XMLNode& npcNode );
    NPC( const std::string& name );
    NPC( const NPC& copy, const XMLNode& npcNode );
    ~NPC();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------
    void Startup();

	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    void Save( XMLNode& parent, bool createChild );
    
	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------
    void AddBehavior( BaseAIBehavior* behavior );

    InteractionEvent* Think( float& out_actionTime);
    virtual void HandleEvent( InteractionEvent* event );

	///---------------------------------------------------------------------------------
	/// Update
	///---------------------------------------------------------------------------------
    void ProcessInput( InputSystem* inputSystem, double deltaSeconds );
    void Update( double deltaSeconds, bool debugModeEnabled );

	///---------------------------------------------------------------------------------
	/// Render
	///---------------------------------------------------------------------------------
    void Render( OpenGLRenderer* renderer, FontRenderer* fontRenderer, const Font& font, const unsigned int& shaderID, bool debugModeEnabled );

	///---------------------------------------------------------------------------------
	/// Public Member Variables
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Static Variables
	///---------------------------------------------------------------------------------


private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    AIBehaviors m_aiBehaviors;
};

typedef std::vector< NPC* > NPCs;

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif