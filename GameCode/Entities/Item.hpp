//=================================================================================
// Item.hpp
// Author: Tyler George
// Date  : August 19, 2015
//=================================================================================

#pragma once


#ifndef __included_Item__
#define __included_Item__

///---------------------------------------------------------------------------------
/// Includes
///---------------------------------------------------------------------------------
#include "GameCode/Entities/Entity.hpp"
#include "Engine/Math/IntRange.hpp"

///---------------------------------------------------------------------------------
/// Typedefs
///---------------------------------------------------------------------------------

///---------------------------------------------------------------------------------
/// Enums
///---------------------------------------------------------------------------------
enum ItemType
{
    IT_WEAPON,
    IT_ARMOR,
    IT_POTION,
    IT_RING,
    IT_FOOD,
    IT_KEY,
    IT_MISC
};

enum EquipmentSlot
{
    ES_HEAD,
    ES_CHEST,
    ES_LEGS,
    ES_FEET,
    ES_PRIMARY,
    ES_SECONDARY,
    ES_INVALID
};

////===========================================================================================
///===========================================================================================
// Item Class
///===========================================================================================
////===========================================================================================
class Item : public Entity
{
public:
	///---------------------------------------------------------------------------------
	/// Constructors/Destructors
	///---------------------------------------------------------------------------------
    Item( const XMLNode& itemNode );
    Item( const Item& copy, const XMLNode& itemNode );
    ~Item();

	///---------------------------------------------------------------------------------
	/// Initialization
	///---------------------------------------------------------------------------------
	
	///---------------------------------------------------------------------------------
	/// Accessors/Queries
	///---------------------------------------------------------------------------------
    ItemType GetType() { return m_type; }
    EquipmentSlot GetEquipSlot() { return m_equipSlot; }
    int GetArmorValue();
    int GetMaxArmor() { return m_armor.m_max; }
    int GetMaxDamage() { return m_damage.m_max; }
    IntRange GetDamageRange() { return m_damage; }
    IntRange GetArmorRange() { return m_armor; }
    IntRange GetAdjustHealth() { return m_adjustHealth; }
    IntRange GetAdditionalDamage() { return m_additionalDamage; }
    std::string GetAffectedFaction() { return m_affectedFaction; }

    static std::string GetTypeAsString( ItemType type );
    static std::string GetEquipSlotAsString( EquipmentSlot equipSlot );

    void Save( XMLNode& parent, bool createChild );
    virtual void CleanUpPointers( std::map< int, Entity* > hookupMap ) { return; }
    virtual void HandleEvent( InteractionEvent* event );
    
	///---------------------------------------------------------------------------------
	/// Mutators
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Update
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Render
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Public Member Variables
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Static Variables
	///---------------------------------------------------------------------------------

private:
	///---------------------------------------------------------------------------------
	/// Private Functions
	///---------------------------------------------------------------------------------

	///---------------------------------------------------------------------------------
	/// Private Member Variables
	///---------------------------------------------------------------------------------
    IntRange m_damage;
    IntRange m_armor;
    EquipmentSlot m_equipSlot;
    IntRange m_adjustHealth;
    ItemType m_type;

    IntRange m_additionalDamage;
    std::string m_affectedFaction;

};

typedef std::vector< Item* > Items;

///---------------------------------------------------------------------------------
/// Inline function implementations
///---------------------------------------------------------------------------------

#endif