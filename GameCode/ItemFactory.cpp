//=================================================================================
// ItemFactory.cpp
// Author: Tyler George
// Date  : September 10, 2015
//=================================================================================


////===========================================================================================
///===========================================================================================
// Includes
///===========================================================================================
////===========================================================================================
#include "Engine/Utilities/FileUtilities.hpp"
#include "Engine/Utilities/Utilities.hpp"
#include "Engine/Utilities/XMLHelper.hpp"

#include "GameCode/ItemFactory.hpp"
#include "Engine/Utilities/DeveloperConsole.hpp"


////===========================================================================================
///===========================================================================================
// Static Variable Initialization
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
/// Protected Variables
///---------------------------------------------------------------------------------
ItemFactories ItemFactory::s_itemFactories;

////===========================================================================================
///===========================================================================================
// Constructors/Destructors
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
ItemFactory::ItemFactory( XMLNode& itemNode )
{
    m_templateItem = new Item( itemNode );

}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
ItemFactory::~ItemFactory()
{

}

////===========================================================================================
///===========================================================================================
// Initialization
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
bool ItemFactory::LoadAllItemFactories()
{
    std::string directoryToSearch = "Data/Items/";
    Strings itemFiles;
    bool success = FindAllFilesOfType( directoryToSearch, "*.item.xml", itemFiles );

    if (success)
    {
        for (Strings::const_iterator itemFileIter = itemFiles.begin(); itemFileIter != itemFiles.end(); ++itemFileIter)
        {
            std::string filePath = *itemFileIter;
            // need to handle error checking here
            XMLNode itemsRoot = XMLNode::parseFile( filePath.c_str(), "Items" );


            int itemCounter = 0;
            bool hasAnotherItem = false;

            do 
            {
                XMLNode itemNode = itemsRoot.getChildNode( "Item", itemCounter++ );
                if (!itemNode.isEmpty())
                {
                    hasAnotherItem = true;
                    std::string name = GetStringProperty( itemNode, "name", "unknown item", false );
                    if (name == "unknown item")
                    {
                        // Soft fail
                        DeveloperConsole::WriteLine( "Attempted to load Item " + std::to_string( itemCounter ) + ". XML doesn't contain \"name\".", WARNING_TEXT_COLOR );
                        continue;
                    }

                    ItemFactory* itemFactory = new ItemFactory( itemNode );
                    s_itemFactories.insert( std::pair< std::string, ItemFactory* >( name, itemFactory ) );

                }
                else
                    hasAnotherItem = false;

            } while ( hasAnotherItem );

            itemsRoot.deleteNodeContent();

        }
        return true;
    }
    else
        return false;
}

////===========================================================================================
///===========================================================================================
// Accessors/Queries
///===========================================================================================
////===========================================================================================

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
ItemFactory* ItemFactory::FindFactoryByName( const std::string& name )
{
    return s_itemFactories.at( name );
}

///---------------------------------------------------------------------------------
///
///---------------------------------------------------------------------------------
Item* ItemFactory::SpawnItem( const XMLNode& possibleSaveData )
{
    Item* newItem = new Item( *m_templateItem, possibleSaveData );
    newItem->SetPrototype( m_templateItem );
    return newItem;
}

////===========================================================================================
///===========================================================================================
// Mutators
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Update
///===========================================================================================
////===========================================================================================

////===========================================================================================
///===========================================================================================
// Render
///===========================================================================================
////===========================================================================================


////===========================================================================================
///===========================================================================================
// Private Functions
///===========================================================================================
////===========================================================================================

